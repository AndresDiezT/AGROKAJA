// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(BackendDbContext))]
    [Migration("20250728135542_SeedColombia")]
    partial class SeedColombia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAddress"));

                    b.Property<string>("AddressReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultAddress")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCodeAddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdAddress");

                    b.HasIndex("IdCity");

                    b.HasIndex("UserDocument");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Backend.Models.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCity"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDepartment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCity");

                    b.HasIndex("IdDepartment");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            IdCity = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDepartment = 1,
                            IsActive = false,
                            NameCity = "Bogota"
                        });
                });

            modelBuilder.Entity("Backend.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCountry"));

                    b.Property<string>("CodeCountry")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdCountry");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            IdCountry = 1,
                            CodeCountry = "CO",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            NameCountry = "Colombia"
                        });
                });

            modelBuilder.Entity("Backend.Models.Customer", b =>
                {
                    b.Property<int>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCustomer"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ReputationScore")
                        .HasColumnType("int");

                    b.Property<int>("TotalPurchases")
                        .HasColumnType("int");

                    b.Property<int>("TotalSales")
                        .HasColumnType("int");

                    b.HasKey("IdCustomer");

                    b.HasIndex("Document");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDepartment"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdDepartment");

                    b.HasIndex("IdCountry");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            IdDepartment = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCountry = 1,
                            IsActive = false,
                            NameDepartment = "Cundinamarca"
                        });
                });

            modelBuilder.Entity("Backend.Models.EmailVerification", b =>
                {
                    b.Property<int>("IdEmailVerification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmailVerification"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("UserDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdEmailVerification");

                    b.HasIndex("UserDocument");

                    b.ToTable("EmailVerifications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Employee", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmployee"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<int>("IdCity")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdEmployee");

                    b.HasIndex("Document");

                    b.HasIndex("IdCity");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            IdEmployee = 1,
                            Document = "0000000000",
                            HireDate = new DateOnly(2024, 7, 18),
                            IdCity = 1,
                            Salary = 0m
                        });
                });

            modelBuilder.Entity("Backend.Models.PasswordResetToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("UserDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Token");

                    b.HasIndex("UserDocument");

                    b.ToTable("PasswordResetTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Permission", b =>
                {
                    b.Property<int>("IdPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermission"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionPermission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GuardNamePermission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModulePermission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NamePermission")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPermission");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            IdPermission = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Detalles",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.users.details"
                        },
                        new
                        {
                            IdPermission = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Actualizar",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.users.update"
                        },
                        new
                        {
                            IdPermission = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Activar",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.users.active"
                        },
                        new
                        {
                            IdPermission = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Desactivar",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.users.deactive"
                        },
                        new
                        {
                            IdPermission = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Crear Empleado",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.employees.create"
                        },
                        new
                        {
                            IdPermission = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Reenviar Credenciales",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.employees.resendCredentials"
                        },
                        new
                        {
                            IdPermission = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Cambiar Contraseña",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.employees.resetPassword"
                        },
                        new
                        {
                            IdPermission = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver Empleados",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.employees.read"
                        },
                        new
                        {
                            IdPermission = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver Clientes",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "admin.customers.read"
                        },
                        new
                        {
                            IdPermission = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Acceso al dashboard general",
                            GuardNamePermission = "web",
                            ModulePermission = "Dashboard",
                            NamePermission = "admin.dashboard.access"
                        },
                        new
                        {
                            IdPermission = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Tipos de Documento",
                            NamePermission = "admin.typesDocument.read"
                        },
                        new
                        {
                            IdPermission = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Detalles",
                            GuardNamePermission = "web",
                            ModulePermission = "Tipos de Documento",
                            NamePermission = "admin.typesDocument.details"
                        },
                        new
                        {
                            IdPermission = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Actualizar",
                            GuardNamePermission = "web",
                            ModulePermission = "Tipos de Documento",
                            NamePermission = "admin.typesDocument.update"
                        },
                        new
                        {
                            IdPermission = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Activar",
                            GuardNamePermission = "web",
                            ModulePermission = "Tipos de Documento",
                            NamePermission = "admin.typesDocument.active"
                        },
                        new
                        {
                            IdPermission = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Desactivar",
                            GuardNamePermission = "web",
                            ModulePermission = "Tipos de Documento",
                            NamePermission = "admin.typesDocument.deactive"
                        },
                        new
                        {
                            IdPermission = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.countries.read"
                        },
                        new
                        {
                            IdPermission = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Detalles",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.countries.details"
                        },
                        new
                        {
                            IdPermission = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Actualizar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.countries.update"
                        },
                        new
                        {
                            IdPermission = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Activar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.countries.active"
                        },
                        new
                        {
                            IdPermission = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Desactivar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.countries.deactive"
                        },
                        new
                        {
                            IdPermission = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.departments.read"
                        },
                        new
                        {
                            IdPermission = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Detalles",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.departments.details"
                        },
                        new
                        {
                            IdPermission = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Actualizar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.departments.update"
                        },
                        new
                        {
                            IdPermission = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Activar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.departments.active"
                        },
                        new
                        {
                            IdPermission = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Desactivar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.departments.deactive"
                        },
                        new
                        {
                            IdPermission = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.cities.read"
                        },
                        new
                        {
                            IdPermission = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Detalles",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.cities.details"
                        },
                        new
                        {
                            IdPermission = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Actualizar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.cities.update"
                        },
                        new
                        {
                            IdPermission = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Activar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.cities.active"
                        },
                        new
                        {
                            IdPermission = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Desactivar",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "admin.cities.deactive"
                        },
                        new
                        {
                            IdPermission = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Roles",
                            NamePermission = "admin.roles.read"
                        },
                        new
                        {
                            IdPermission = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Detalles",
                            GuardNamePermission = "web",
                            ModulePermission = "Roles",
                            NamePermission = "admin.roles.details"
                        },
                        new
                        {
                            IdPermission = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Actualizar",
                            GuardNamePermission = "web",
                            ModulePermission = "Roles",
                            NamePermission = "admin.roles.update"
                        },
                        new
                        {
                            IdPermission = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Activar",
                            GuardNamePermission = "web",
                            ModulePermission = "Roles",
                            NamePermission = "admin.roles.active"
                        },
                        new
                        {
                            IdPermission = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Desactivar",
                            GuardNamePermission = "web",
                            ModulePermission = "Roles",
                            NamePermission = "admin.roles.deactive"
                        },
                        new
                        {
                            IdPermission = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Tipos de Documento",
                            NamePermission = "common.typesDocument.read"
                        },
                        new
                        {
                            IdPermission = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "common.countries.read"
                        },
                        new
                        {
                            IdPermission = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "common.departments.read"
                        },
                        new
                        {
                            IdPermission = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Localización",
                            NamePermission = "common.cities.read"
                        },
                        new
                        {
                            IdPermission = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Roles",
                            NamePermission = "common.roles.read"
                        },
                        new
                        {
                            IdPermission = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionPermission = "Ver",
                            GuardNamePermission = "web",
                            ModulePermission = "Usuarios",
                            NamePermission = "common.profile.access"
                        });
                });

            modelBuilder.Entity("Backend.Models.PhoneVerification", b =>
                {
                    b.Property<int>("IdPhoneVerification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPhoneVerification"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("UserDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdPhoneVerification");

                    b.HasIndex("UserDocument");

                    b.ToTable("PhoneVerifications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.RefreshToken", b =>
                {
                    b.Property<int>("IdRefreshToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRefreshToken"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdRefreshToken");

                    b.HasIndex("UserDocument");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EditableRole")
                        .HasColumnType("bit");

                    b.Property<string>("GuardNameRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HierarchyRole")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdRole");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            IdRole = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EditableRole = false,
                            GuardNameRole = "web",
                            HierarchyRole = 1,
                            IsActive = true,
                            NameRole = "Administrador"
                        });
                });

            modelBuilder.Entity("Backend.Models.RolePermission", b =>
                {
                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int>("IdPermission")
                        .HasColumnType("int");

                    b.HasKey("IdRole", "IdPermission");

                    b.HasIndex("IdPermission");

                    b.ToTable("RolesHasPermissions", (string)null);

                    b.HasData(
                        new
                        {
                            IdRole = 1,
                            IdPermission = 1
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 2
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 3
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 4
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 5
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 6
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 7
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 8
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 9
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 10
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 11
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 12
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 13
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 14
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 15
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 16
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 17
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 18
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 19
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 20
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 21
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 22
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 23
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 24
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 25
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 26
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 27
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 28
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 29
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 30
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 31
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 32
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 33
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 34
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 35
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 36
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 37
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 38
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 39
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 40
                        },
                        new
                        {
                            IdRole = 1,
                            IdPermission = 41
                        });
                });

            modelBuilder.Entity("Backend.Models.TypeDocument", b =>
                {
                    b.Property<int>("IdTypeDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeDocument"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameTypeDocument")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTypeDocument");

                    b.ToTable("TypesDocument", (string)null);

                    b.HasData(
                        new
                        {
                            IdTypeDocument = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameTypeDocument = "CC"
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<string>("Document")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailIsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdTypeDocument")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PhoneIsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Document");

                    b.HasIndex("IdTypeDocument");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Document = "0000000000",
                            BirthDate = new DateOnly(1, 1, 1),
                            CountryCode = "+57",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "god@agrokaja.com",
                            EmailIsVerified = true,
                            FirstName = "Administrador",
                            IdTypeDocument = 1,
                            IsActive = true,
                            LastName = "Agrokaja",
                            PasswordHash = "$2a$12$3PnYBDSegIGdKAis95YfCuobDqpXYsY965sjCo7FxVXFYoi/djLcG",
                            PhoneIsVerified = true,
                            PhoneNumber = "3000000000",
                            ProfileImage = "https://www.istockphoto.com/photo/resurrected-jesus-christ-ascending-above-the-sky-and-clouds-heaven-concept-gm1464383776-497090261",
                            Username = "GOD"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserRole", b =>
                {
                    b.Property<string>("UserDocument")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.HasKey("UserDocument", "IdRole");

                    b.HasIndex("IdRole");

                    b.ToTable("UserHasRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserDocument = "0000000000",
                            IdRole = 1
                        });
                });

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.HasOne("Backend.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.City", b =>
                {
                    b.HasOne("Backend.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("IdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend.Models.Customer", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Document")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Department", b =>
                {
                    b.HasOne("Backend.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Backend.Models.EmailVerification", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Employee", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Document")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.PasswordResetToken", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.PhoneVerification", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.RefreshToken", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.RolePermission", b =>
                {
                    b.HasOne("Backend.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("IdPermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.TypeDocument", "TypeDocument")
                        .WithMany()
                        .HasForeignKey("IdTypeDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeDocument");
                });

            modelBuilder.Entity("Backend.Models.UserRole", b =>
                {
                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
